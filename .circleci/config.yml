version: 2.1
orbs:
  slack: circleci/slack@4.4.4
commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>
 #
 # revert-migrations:
 #   description: Revert the last migration if successfully run in the current workflow.
 #   parameters:
 #     # Add parameter here     
 #   steps:
 #     - run:
 #         name: Revert migrations
 #         # Add when this will run
 #         command: |
 #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
 #           SUCCESS = 1
 #           if(( $SUCCESS==1 )); 
 #           then
 #           #  cd ~/project/backend
 #           #  npm install
 #           #  Add revert code here. You can find this in the Getting Started section.
 #             exit 1
 #           fi
 #           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
          keys: [testfrontend-build]
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
      - store_test_results:
          path: FE_test-results       
      - save_cache:
          paths: [frontend/node_modules]
          key: testfrontend-build
          
  test-backend:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
          keys: [testbackend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
      - store_test_results:
          path: BE_test-results
      - save_cache:
          paths: [backend/node_modules]
          key: testbackend-build
            
  scan-frontend:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
          keys: [scanfrontend-build]
      - run:
          name: Front-end scan
          command: |
             # Your code here
             cd frontend
             npm install
             npm audit --audit-level=critical
             npm audit fix
      - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend-build
      - slack/notify:
          event: fail
          mentions: '@OMAR'
          template: basic_fail_1
          
  scan-backend:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
          keys: [scanbackend-build]
      - run:
          name: Back-end scan
          command: |
             # Your code here
             cd backend
             npm install
             npm audit --audit-level=critical
             npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: scanbackend-build
      - slack/notify:
          event: fail
          mentions: '@OMAR'
          template: basic_fail_1          
#
  deploy-infrastructure:
    docker:
      amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              curl -H "Content-Type: text/plain" -H "token: 160a13c3-3528-40cc-af48-4368513fbd75" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

#  configure-infrastructure:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Configure server
#          command: |
#            # Your code here
#            exit 1
#      # Here's where you will add some code to rollback on failure      
#
#  run-migrations:
#    docker:
#      # Docker image here that supports NodeJS
#    steps:
#      # Checkout code from git
#      - run:
#          name: Run migrations
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Send migration results to memstash
#          command: |
#            # Your code here
#            exit 1
#     # Here's where you will add some code to rollback on failure      
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure      
#                    
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image 
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
    #  - configure-infrastructure:
    #      requires: [deploy-infrastructure]
    #  - run-migrations:
    #      requires: [configure-infrastructure]
    #  - deploy-frontend:
    #      requires: [run-migrations]
    #  - deploy-backend:
    #      requires: [run-migrations]
    #  - smoke-test:
    #      requires: [deploy-backend, deploy-frontend]
    #  - cloudfront-update:
    #      requires: [smoke-test]
    #  - cleanup:
    #      requires: [cloudfront-update]
